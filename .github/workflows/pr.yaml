# generated by praktika

name: PR

on:
  pull_request:
    branches: ['master']

# Cancel the previous wf run in PRs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1
  GH_TOKEN: ${{ github.token }}

# Allow updating GH commit statuses and PR comments to post an actual job reports link
permissions: write-all

jobs:

  config_workflow:
    runs-on: [ci_services]
    needs: []
    name: "Config Workflow"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Config Workflow''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Config Workflow''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  docker_builds:
    runs-on: [ci_services_ebs]
    needs: [config_workflow]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RG9ja2VyIEJ1aWxkcw==') }}
    name: "Docker Builds"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Docker Builds''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Docker Builds''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  style_check:
    runs-on: [ci_services]
    needs: [config_workflow, docker_builds]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'U3R5bGUgQ2hlY2s=') }}
    name: "Style Check"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Style Check''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Style Check''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  fast_test:
    runs-on: [builder]
    needs: [config_workflow, docker_builds]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RmFzdCB0ZXN0') }}
    name: "Fast test"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Fast test''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Fast test''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  build_amd_debug:
    runs-on: [builder]
    needs: [config_workflow, docker_builds]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'QnVpbGQgKGFtZF9kZWJ1Zyk=') }}
    name: "Build (amd_debug)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Build (amd_debug)''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Build (amd_debug)''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  build_amd_release:
    runs-on: [builder]
    needs: [config_workflow, docker_builds]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'QnVpbGQgKGFtZF9yZWxlYXNlKQ==') }}
    name: "Build (amd_release)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Build (amd_release)''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Build (amd_release)''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  stateless_tests_amd_release_parallel:
    runs-on: [builder]
    needs: [config_workflow, docker_builds, build_amd_release]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'U3RhdGVsZXNzIHRlc3RzIChhbWQsIHJlbGVhc2UpIChwYXJhbGxlbCk=') }}
    name: "Stateless tests (amd, release) (parallel)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Stateless tests (amd, release) (parallel)''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Stateless tests (amd, release) (parallel)''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  stateless_tests_amd_release_non_parallel:
    runs-on: [style-checker]
    needs: [config_workflow, docker_builds, build_amd_release]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'U3RhdGVsZXNzIHRlc3RzIChhbWQsIHJlbGVhc2UpIChub24tcGFyYWxsZWwp') }}
    name: "Stateless tests (amd, release) (non-parallel)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Stateless tests (amd, release) (non-parallel)''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Stateless tests (amd, release) (non-parallel)''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  stateless_tests_amd_debug_parallel:
    runs-on: [builder]
    needs: [config_workflow, docker_builds, build_amd_debug]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'U3RhdGVsZXNzIHRlc3RzIChhbWQsIGRlYnVnKSAocGFyYWxsZWwp') }}
    name: "Stateless tests (amd, debug) (parallel)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Stateless tests (amd, debug) (parallel)''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Stateless tests (amd, debug) (parallel)''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  stateless_tests_amd_debug_non_parallel:
    runs-on: [style-checker]
    needs: [config_workflow, docker_builds, build_amd_debug]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'U3RhdGVsZXNzIHRlc3RzIChhbWQsIGRlYnVnKSAobm9uLXBhcmFsbGVsKQ==') }}
    name: "Stateless tests (amd, debug) (non-parallel)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Stateless tests (amd, debug) (non-parallel)''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Stateless tests (amd, debug) (non-parallel)''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi

  finish_workflow:
    runs-on: [ci_services]
    needs: [config_workflow, docker_builds, style_check, fast_test, build_amd_debug, build_amd_release, stateless_tests_amd_release_parallel, stateless_tests_amd_release_non_parallel, stateless_tests_amd_debug_parallel, stateless_tests_amd_debug_non_parallel]
    if: ${{ !cancelled() }}
    name: "Finish Workflow"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            clear-repository: true
            ref: ${{ github.head_ref }}

      - name: Prepare env script
        run: |
          cat > /tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.

          cat > /tmp/praktika/workflow_config_pr.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > /tmp/praktika/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

          rm -rf /tmp/praktika/input /tmp/praktika/output /tmp/praktika
          mkdir -p /tmp/praktika /tmp/praktika/input /tmp/praktika/output

      - name: Run
        id: run
        run: |
          . /tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run --job '''Finish Workflow''' --workflow "PR" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee /tmp/praktika/praktika_run.log
          else
            python3 -m praktika run --job '''Finish Workflow''' --workflow "PR" --ci |& tee /tmp/praktika/praktika_run.log
          fi
